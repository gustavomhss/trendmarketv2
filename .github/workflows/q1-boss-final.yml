name: Q1 Boss Final

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      release_tag:
        description: Optional release tag to annotate the report
        required: false
        type: string
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'scripts/**'
      - 's*/**'
      - 'docs/**'
      - 'dashboards/**'

concurrency:
  group: q1-boss-final-${{ github.ref }}
  cancel-in-progress: true

env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  PYTHONHASHSEED: '0'
  PYTHONUTF8: '1'
  HYPOTHESIS_PROFILE: ci
  HYPOTHESIS_SEED: '12345'

jobs:
  stage:
    name: Stage ${{ matrix.stage }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        stage: [s1, s2, s3, s4, s5, s6]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        run: |
          python -m pip install \
            -r requirements.lock \
            ruff==0.6.8 \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Execute sprint guard
        run: python scripts/boss_final/sprint_guard.py --stage ${{ matrix.stage }}

      - name: Upload stage bundle
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: boss-stage-${{ matrix.stage }}
          path: out/q1_boss_final/stages/${{ matrix.stage }}

      - name: Comment on PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@11c33d7e17af65c2f8f5c38bf6e8f1525ba9a4d3
        env:
          STAGE_NAME: ${{ matrix.stage }}
          STAGE_DIR: out/q1_boss_final/stages/${{ matrix.stage }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const stage = process.env.STAGE_NAME;
            const stageDir = path.join(process.cwd(), process.env.STAGE_DIR || '');
            let body = `⚠️ Stage ${stage.toUpperCase()} — resultados indisponíveis. Consulte o GITHUB_STEP_SUMMARY.`;

            try {
              const resultPath = path.join(stageDir, 'result.json');
              const raw = fs.readFileSync(resultPath, 'utf8');
              const data = JSON.parse(raw);
              const status = String(data.status || 'UNKNOWN').toUpperCase();
              const notes = data.notes ? String(data.notes) : 'Sem observações registradas.';
              const emoji = status === 'PASS' ? '✅' : '❌';
              body = `${emoji} Stage ${stage.toUpperCase()} — ${status}\n\n${notes}`;
            } catch (error) {
              core.warning(`Falha ao preparar comentário do estágio ${stage}: ${error.message}`);
            }

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              });
            } catch (error) {
              core.warning(`Falha ao criar comentário no PR: ${error.message}`);
            }

            try {
              core.summary.addHeading(`Stage ${stage.toUpperCase()}`);
              core.summary.addRaw(body);
              await core.summary.write();
            } catch (summaryError) {
              core.warning(`Falha ao escrever GITHUB_STEP_SUMMARY: ${summaryError.message}`);
            }

  boss:
    needs: stage
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      REPORT_DIR: out/q1_boss_final
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        run: |
          python -m pip install \
            -r requirements.lock \
            ruff==0.6.8 \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Download stage bundles
        if: always()
        uses: actions/download-artifact@9bc31d1110da1a34f4cfcc1c4dfd4ad73752c86f
        with:
          path: out/q1_boss_final/stages
          merge-multiple: true

      - name: Aggregate Q1 boss report
        timeout-minutes: 5
        run: python scripts/boss_final/aggregate_q1.py

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final
          path: ${{ env.REPORT_DIR }}

      - name: Validate report schema
        run: python -m jsonschema --instance "$REPORT_DIR/report.json" --schema schemas/q1_boss_report.schema.json

      - name: Evaluate guard status
        id: guard
        run: |
          status=$(cat "$REPORT_DIR/guard_status.txt")
          echo "guard_status=$status" >> $GITHUB_OUTPUT
          if [ "$status" != "PASS" ]; then
            exit 1
          fi

      - name: Comment on PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@11c33d7e17af65c2f8f5c38bf6e8f1525ba9a4d3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const reportDir = process.env.REPORT_DIR || '';
            let body = '⚠️ Relatório não encontrado. Veja o GITHUB_STEP_SUMMARY para detalhes.';

            try {
              const commentPath = path.join(process.cwd(), reportDir, 'pr_comment.md');
              const raw = fs.readFileSync(commentPath, 'utf8');
              body = raw;
            } catch (error) {
              core.warning(`Falha ao ler comentário agregado: ${error.message}`);
            }

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body,
              });
            } catch (error) {
              core.warning(`Falha ao publicar comentário do PR: ${error.message}`);
            }

            try {
              core.summary.addHeading('Q1 Boss Final');
              core.summary.addRaw(body);
              await core.summary.write();
            } catch (summaryError) {
              core.warning(`Falha ao escrever GITHUB_STEP_SUMMARY: ${summaryError.message}`);
            }

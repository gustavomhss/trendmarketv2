name: Q1 Boss Final

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      release_tag:
        description: Optional release tag to annotate the report
        required: false
        type: string
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'scripts/**'
      - 's*/**'
      - 'docs/**'
      - 'dashboards/**'

concurrency:
  group: q1-boss-final-${{ github.ref }}
  cancel-in-progress: true

env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  PYTHONHASHSEED: '0'
  PYTHONUTF8: '1'
  HYPOTHESIS_PROFILE: ci
  HYPOTHESIS_SEED: '12345'

jobs:
  stage:
    name: Stage ${{ matrix.stage }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        stage: [s1, s2, s3, s4, s5, s6]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        run: |
          python -m pip install \
            -r requirements.lock \
            ruff==0.6.8 \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

        - name: Run sprint guard (s1: lint/format/tests/healthcheck)
          if: matrix.stage == 's1'
          continue-on-error: true
          run: python scripts/boss_final/sprint_guard.py --stage s1

      - name: Run sprint guard (s2: build/tests/microbench)
        if: matrix.stage == 's2'
        continue-on-error: true
        run: python scripts/boss_final/sprint_guard.py --stage s2

      - name: Run sprint guard (s3: observability smoke)
        if: matrix.stage == 's3'
        continue-on-error: true
        run: python scripts/boss_final/sprint_guard.py --stage s3

      - name: Run sprint guard (s4: ORR lite validations)
        if: matrix.stage == 's4'
        continue-on-error: true
        run: python scripts/boss_final/sprint_guard.py --stage s4

      - name: Run sprint guard (s5: dashboard jq checks)
        if: matrix.stage == 's5'
        continue-on-error: true
        run: python scripts/boss_final/sprint_guard.py --stage s5

      - name: Run sprint guard (s6: scorecard execution)
        if: matrix.stage == 's6'
        continue-on-error: true
        run: python scripts/boss_final/sprint_guard.py --stage s6

      - name: Upload stage artifacts
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final-${{ matrix.stage }}
          path: out/q1_boss_final/stages/${{ matrix.stage }}
          if-no-files-found: error

  boss:
    needs: stage
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      REPORT_DIR: out/q1_boss_final
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        run: |
          python -m pip install \
            -r requirements.lock \
            ruff==0.6.8 \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Download stage artifacts
        uses: actions/download-artifact@fa9b9c1d8b545e8885f3db3cc333a8d5a1cb544a
        with:
          pattern: q1-boss-final-*
          path: ${{ env.REPORT_DIR }}/stages
          merge-multiple: true
          if-no-files-found: error

      - name: Aggregate Q1 boss report
        timeout-minutes: 5
        run: python scripts/boss_final/aggregate_q1.py

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final
          path: ${{ env.REPORT_DIR }}

      - name: Validate report schema
        run: python -m jsonschema --instance "$REPORT_DIR/report.json" --schema schemas/q1_boss_report.schema.json

      - name: Evaluate guard status
        id: guard
        run: |
          status=$(cat "$REPORT_DIR/guard_status.txt")
          echo "guard_status=$status" >> $GITHUB_OUTPUT
          if [ "$status" != "PASS" ]; then
            exit 1
          fi

      - name: Comment on PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@11c33d7e17af65c2f8f5c38bf6e8f1525ba9a4d3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const reportDir = process.env.REPORT_DIR;
            const commentPath = path.join(reportDir, 'pr_comment.md');
            const fallback = '⚠️ Relatório não encontrado. Veja GITHUB_STEP_SUMMARY para detalhes.';
            const body = fs.existsSync(commentPath)
              ? fs.readFileSync(commentPath, 'utf8')
              : fallback;

            const writeSummary = async () => {
              core.summary.clear();
              core.summary.addHeading('Q1 Boss Final');
              core.summary.addRaw(body);
              await core.summary.write();
            };

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } catch (error) {
              core.warning(`Falha ao comentar no PR: ${error.message}`);
              throw error;
            } finally {
              try {
                await writeSummary();
              } catch (summaryError) {
                core.warning(`Falha ao escrever GITHUB_STEP_SUMMARY: ${summaryError.message}`);
              }
            }

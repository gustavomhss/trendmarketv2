name: Q1 Boss Final

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      release_tag:
        description: Optional release tag to annotate the report
        required: false
        type: string
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'scripts/**'
      - 's*/**'
      - 'docs/**'
      - 'dashboards/**'

concurrency:
  group: q1-boss-final-${{ github.ref }}
  cancel-in-progress: true

env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  PYTHONHASHSEED: '0'
  PYTHONUTF8: '1'
  HYPOTHESIS_PROFILE: ci
  HYPOTHESIS_SEED: '12345'

jobs:
  stage:
    name: Stage ${{ matrix.stage }} (clean=${{ matrix.clean_runner }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        stage: [s1, s2, s3, s4, s5, s6]
        clean_runner: [false, true]
    env:
      STAGE: ${{ matrix.stage }}
      CLEAN_RUNNER: ${{ matrix.clean_runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        timeout-minutes: 5
        run: python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        timeout-minutes: 5
        run: |
          python -m pip install \
            -r requirements.lock \
            ruff==0.6.8 \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Install system dependencies
        timeout-minutes: 5
        run: sudo apt-get update && sudo apt-get install -y jq yamllint

      - name: Execute sprint guard
        id: run
        continue-on-error: true
        timeout-minutes: 10
        run: |
          set -euo pipefail
          if [ "$CLEAN_RUNNER" = "true" ]; then
            variant="clean"
          else
            variant="primary"
          fi
          echo "variant=$variant" >> "$GITHUB_OUTPUT"
          python scripts/boss_final/sprint_guard.py --stage "$STAGE" --variant "$variant"

      - name: Capture guard result
        id: guard
        if: always()
        run: |
          set -euo pipefail
          variant="${{ steps.run.outputs.variant }}"
          result_dir="out/q1_boss_final/stages/${STAGE}/${variant}"
          python - <<'PY' "$result_dir" "$GITHUB_OUTPUT"
import json
import sys
from pathlib import Path
result_dir = Path(sys.argv[1])
output_path = Path(sys.argv[2])
result_path = result_dir / "result.json"
if not result_path.exists():
    raise SystemExit(f"resultado ausente: {result_path}")
result = json.loads(result_path.read_text(encoding="utf-8"))
status = str(result.get("status", "FAIL")).upper()
notes = result.get("notes", "").replace("\n", " ").strip()
with output_path.open("a", encoding="utf-8") as handle:
    handle.write(f"status={status}\n")
    handle.write(f"notes={notes}\n")
    handle.write(f"variant={result.get('variant', variant)}\n")
    handle.write(f"result_dir={result_dir.as_posix()}\n")
PY

      - name: Upload guard bundle
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final-${{ matrix.stage }}-${{ steps.guard.outputs.variant }}
          path: ${{ steps.guard.outputs.result_dir }}
          if-no-files-found: error

      - name: Upload stage directory
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final-stage-${{ matrix.stage }}
          path: out/q1_boss_final/stages/${{ matrix.stage }}

      - name: Publish stage summary
        if: always()
        uses: actions/github-script@11c33d7e17af65c2f8f5c38bf6e8f1525ba9a4d3
        env:
          STAGE: ${{ matrix.stage }}
          VARIANT: ${{ steps.guard.outputs.variant }}
          STATUS: ${{ steps.guard.outputs.status }}
          NOTES: ${{ steps.guard.outputs.notes }}
        with:
          script: |
            const stage = process.env.STAGE.toUpperCase();
            const variant = process.env.VARIANT || 'primary';
            const status = (process.env.STATUS || 'FAIL').toUpperCase();
            const notes = process.env.NOTES || '';
            const heading = `Stage ${stage} (${variant})`;
            const body = `${status === 'PASS' ? '✅' : '❌'} ${heading} — **${status}**\n\n${notes}`;

            const writeSummary = async () => {
              try {
                core.summary.addHeading(heading, 3);
                core.summary.addRaw(`Status: **${status}**\n\n${notes}`);
                await core.summary.write();
              } catch (error) {
                core.warning(`Falha ao escrever summary: ${error.message}`);
              }
            };

            try {
              if (context.eventName === 'pull_request' && variant === 'primary') {
                try {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                  });
                } catch (error) {
                  core.warning(`Falha ao comentar no PR: ${error.message}`);
                }
              }
            } finally {
              await writeSummary();
            }

      - name: Enforce guard status
        if: ${{ steps.guard.outputs.status != 'PASS' }}
        run: exit 1

  aggregate:
    name: Aggregate Boss Final
    needs: stage
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RELEASE_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.release_tag || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab3f3460e4f9d6a7152fb7a3b6

      - name: Set up Python
        uses: actions/setup-python@57ded73d95736b4867d21e0da0f2e054fea0f6e7
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Upgrade packaging toolchain
        timeout-minutes: 5
        run: python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        timeout-minutes: 5
        run: |
          python -m pip install \
            -r requirements.lock \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Aggregate stages
        id: aggregate
        continue-on-error: true
        timeout-minutes: 10
        run: |
          set -euo pipefail
          if [ -n "$RELEASE_TAG" ]; then
            python scripts/boss_final/aggregate_q1.py --release-tag "$RELEASE_TAG"
          else
            python scripts/boss_final/aggregate_q1.py
          fi

      - name: Validate aggregated report schema
        if: always()
        timeout-minutes: 3
        run: python -m jsonschema --instance out/q1_boss_final/report.json --schema schemas/q1_boss_report.schema.json

      - name: Upload aggregate bundle
        if: always()
        uses: actions/upload-artifact@89ef406dd8d7e03cde85f3b4a7a6b5483c8f8c7a
        with:
          name: q1-boss-final-aggregate
          path: out/q1_boss_final

      - name: Publish Boss Final summary
        if: always()
        uses: actions/github-script@11c33d7e17af65c2f8f5c38bf6e8f1525ba9a4d3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const base = path.join(process.cwd(), 'out', 'q1_boss_final');
            const commentPath = path.join(base, 'pr_comment.md');
            let body = '⚠️ Relatório do Boss Final indisponível. Consulte o GITHUB_STEP_SUMMARY.';

            try {
              if (fs.existsSync(commentPath)) {
                body = fs.readFileSync(commentPath, 'utf8');
              }
            } catch (error) {
              core.warning(`Falha ao ler pr_comment.md: ${error.message}`);
            }

            const writeSummary = async () => {
              try {
                core.summary.addHeading('Q1 Boss Final');
                core.summary.addRaw(body);
                core.summary.addEOL();
                await core.summary.write();
              } catch (error) {
                core.warning(`Falha ao escrever summary: ${error.message}`);
              }
            };

            try {
              if (context.eventName === 'pull_request') {
                try {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                  });
                } catch (error) {
                  core.warning(`Falha ao comentar no PR: ${error.message}`);
                }
              }
            } finally {
              await writeSummary();
            }

      - name: Enforce aggregate status
        if: ${{ steps.aggregate.outcome == 'failure' }}
        run: exit 1

      - name: Fail on guard result
        if: ${{ always() && needs.stage.result == 'failure' }}
        run: exit 1

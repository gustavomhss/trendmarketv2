name: S6 Scorecards

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
  pull_request:
    paths:
      - '.github/workflows/s6-scorecards.yml'
      - 'scripts/scorecards/**'
      - 'scripts/watchers/**'
      - 'schemas/**'
      - 's6_validation/**'
      - 'dashboards/grafana/scorecards_quorum_failover_staleness.json'
      - 'docs/scorecards/**'
      - 'Makefile'

concurrency:
  group: s6-scorecards-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scorecards:
    runs-on: ubuntu-latest
    timeout-minutes: 20
concurrency: { group: s6-scorecards-${{ github.ref }}, cancel-in-progress: true }

jobs:
  scorecards:
    name: Scorecards (clean=${{ matrix.clean_runner }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        clean_runner: [false, true]
    env:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PYTHONHASHSEED: '0'
      PYTHONUTF8: '1'
      HYPOTHESIS_PROFILE: ci
      HYPOTHESIS_SEED: '12345'
      REPORT_DIR: out/s6_scorecards
      CLEAN_RUNNER: ${{ matrix.clean_runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # pinned (was v4)

      - name: Install Python 3.11
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.11 python3.11-venv python3.11-distutils python3.11-dev
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 400
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11 400
          sudo update-alternatives --set python3 /usr/bin/python3.11
          sudo update-alternatives --set python /usr/bin/python3.11
          python -m ensurepip --upgrade

      - name: Upgrade packaging toolchain
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0

      - name: Install Python dependencies
        run: |
          python -m pip install \
            -r requirements.lock \
            yamllint==1.35.1 \
            pytest==8.3.3 \
            hypothesis==6.103.0 \
            jsonschema==4.23.0

      - name: Ensure Ruff version
        run: bash .github/scripts/ensure_ruff_version.sh

      - name: Install jq
        timeout-minutes: 5
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Lint YAML
        timeout-minutes: 5
        run: yamllint .

      - name: Ruff lint
        timeout-minutes: 5
        run: ruff check scripts

      - name: Ruff format check
        timeout-minutes: 5
        run: ruff format --check scripts

      - name: Run pytest
        timeout-minutes: 5
        run: pytest -q tests/scorecards tests/boss_final

      - name: Validate Grafana export
        timeout-minutes: 5
        run: |
          jq -e '
            (.time.from == "now-24h") and
            (.time.to == "now") and
            (.panels | length == 5) and
            ([.panels[].title] == [
              "Quorum ratio",
              "Failover time p95 (s)",
              "Replica staleness p95 (s)",
              "CDC lag p95 (s)",
              "Oracle divergence (%)"
            ])
          ' dashboards/grafana/scorecards_quorum_failover_staleness.json

      - name: Validate existing report schema
        run: ruff scripts/

      - name: Ruff format check
        timeout-minutes: 5
        run: ruff format --check scripts/

      - name: Validate Grafana dashboard structure (jq)
        timeout-minutes: 5
        run: |
          jq -e '
            def has_panel(id; title; expr):
              any(
                .panels[];
                .id == id and
                .title == title and
                .type == "stat" and
                (.targets | length == 1) and
                .targets[0].expr == expr
              );

            (.title == "Scorecards Quorum Failover Staleness") and
            (.time.from == "now-24h") and
            (.time.to == "now") and
            (.templating.list == []) and
            (.schemaVersion == 40) and
            (.version == 1) and
            (.panels | length == 5) and
            has_panel(1; "Quorum Ratio"; "avg(mbp:oracle:quorum_ratio{env=\"prod\"})") and
            has_panel(2; "Failover p95 (s)"; "avg(mbp:oracle:failover_time_p95_s{env=\"prod\"})") and
            has_panel(3; "Staleness p95 (s)"; "avg(mbp:oracle:staleness_p95_s{env=\"prod\"})") and
            has_panel(4; "CDC Lag p95 (s)"; "avg(mbp:oracle:cdc_lag_p95_s{env=\"prod\"})") and
            has_panel(5; "Divergence (%)"; "avg(mbp:oracle:divergence_pct{env=\"prod\"})")
          ' dashboards/grafana/scorecards_quorum_failover_staleness.json > /dev/null \
            || { echo 'Dashboard structure mismatch' >&2; exit 1; }

      - name: Run pytest
        timeout-minutes: 10
        run: pytest -q

      - name: Validate existing report schema
        timeout-minutes: 3
        run: |
          if [ -f "$REPORT_DIR/report.json" ]; then
            python -m jsonschema --instance "$REPORT_DIR/report.json" --schema schemas/report.schema.json || exit 1
          fi

      - name: UTF-8 and CRLF hygiene
        timeout-minutes: 5
        run: |
          python - <<'PY'
          from pathlib import Path
          import sys

          root = Path('.')
          bad = []
          for path in root.rglob('*'):
              if not path.is_file():
                  continue
              if path.suffix not in {'.py', '.json', '.sh', '.md', '.yml', '.yaml'}:
                  continue
              data = path.read_bytes()
              try:
                  data.decode('utf-8')
              except UnicodeDecodeError:
                  bad.append(f"UTF8:{path}")
                  continue
              if b'\r' in data:
                  bad.append(f"CRLF:{path}")
          if bad:
              for entry in bad:
                  print(entry)
              sys.exit(1)
            if not path.is_file():
              continue
            if path.suffix not in {'.py', '.json', '.sh', '.md', '.yml', '.yaml'}:
              continue
            data = path.read_bytes()
            try:
              data.decode('utf-8')
            except UnicodeDecodeError:
              bad.append(f"UTF8:{path}")
              continue
            if b'\r' in data:
              bad.append(f"CRLF:{path}")
          if bad:
            for entry in bad:
              print(entry)
            sys.exit(1)
          PY

      - name: Generate S6 scorecards
        timeout-minutes: 5
        run: python scripts/scorecards/s6_scorecards.py

      - name: Upload artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4  # pinned (was v4)
        with:
          name: s6-scorecards
          path: ${{ env.REPORT_DIR }}

      - name: Validate generated report schema
        run: python -m jsonschema --instance "$REPORT_DIR/report.json" --schema schemas/report.schema.json

      - name: Evaluate guard status
        id: guard
        timeout-minutes: 3
        run: python -m jsonschema --instance "$REPORT_DIR/report.json" --schema schemas/report.schema.json

      - name: Evaluate guard status
        timeout-minutes: 2
        run: |
          status=$(cat "$REPORT_DIR/guard_status.txt")
          echo "guard_status=$status" >> $GITHUB_OUTPUT
          if [ "$status" != "PASS" ]; then
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        id: guard

      - name: Publish scorecard summary
        if: always()
        uses: ./.github/actions/github-script
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const reportDir = process.env.REPORT_DIR;
            const commentPath = reportDir ? path.join(reportDir, 'pr_comment.md') : undefined;
            let body = '⚠️ Relatório não encontrado. Veja GITHUB_STEP_SUMMARY para detalhes.';

            if (!reportDir) {
              core.warning('Variável de ambiente REPORT_DIR não definida; usando mensagem padrão.');
            } else {
              try {
                if (fs.existsSync(commentPath)) {
                  body = fs.readFileSync(commentPath, 'utf8');
                }
              } catch (fileError) {
                core.warning(`Falha ao ler comentário gerado: ${fileError.message}`);
              }
            }

            const writeSummary = async () => {
              try {
                core.summary.addHeading('S6 Scorecards');
                core.summary.addRaw(body);
                core.summary.addEOL();
                await core.summary.write();
              } catch (summaryError) {
                core.warning(`Falha ao escrever GITHUB_STEP_SUMMARY: ${summaryError.message}`);
              }
            };

            try {
              if (context.eventName === 'pull_request') {
                try {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body,
                  });
                } catch (error) {
                  core.warning(`Falha ao publicar comentário do PR: ${error.message}`);
                }
              }
            } finally {
              await writeSummary();
            }

name: MBP S2 ORR

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  orr:
    name: MBP S2 ORR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd719072671a5b573d8ee83c61156b598640ef

      - name: Tooling versions
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          bash --version | head -n1 || true
          jq --version || true
          convert -version || echo "ImageMagick (convert) not installed"
          coreutils --version 2>/dev/null | head -n1 || (echo "coreutils present" && true)

      - name: Depend√™ncias m√≠nimas
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          sudo apt-get update
          sudo apt-get install -y jq coreutils imagemagick || echo "imagemagick n√£o instalado (prosseguindo)"

      - name: Prepare evidence dirs
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          mkdir -p out/orr_gatecheck/evidence out/sim
          echo "üìÅ Evidence dir ready: out/orr_gatecheck/evidence"

      - name: ORR All
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          bash scripts/orr_all.sh

      - name: Fail Fast on Spec Failure
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          if grep -q "RESULT=FAIL" out/orr_gatecheck/evidence/spec_check.txt; then
            echo "Spec check falhou" >&2
            exit 1
          fi

      - name: Shellcheck (advisory)
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          if command -v shellcheck >/dev/null 2>&1; then
            shellcheck scripts/**/*.sh
          else
            echo "shellcheck indispon√≠vel"
          fi

      - name: Publicar artefatos
        uses: actions/upload-artifact@a8a3bc47d66b9b4ade100e3f1920993de94506ee
        with:
          name: orr-evidence
          path: out/orr_gatecheck/evidence

      - name: Sum√°rio de artefatos
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'; export LC_ALL=C; export TZ=UTC
          if [ -d out/orr_gatecheck/evidence ]; then
            find out/orr_gatecheck/evidence -maxdepth 1 -type f -printf "%f %s bytes\n" | sort || true
          else
            echo "sem diret√≥rio de evid√™ncias"
          fi

      - name: Coment√°rio no PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: ./.github/actions/github-script
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const base = path.join(process.cwd(), 'out/orr_gatecheck/evidence');
            const read = (file) => fs.readFileSync(path.join(base, file), 'utf8').trim();
            const safeRead = (file) => {
              const p = path.join(base, file);
              return fs.existsSync(p) ? fs.readFileSync(p, 'utf8').trim() : '';
            };
            const status = safeRead('spec_check.txt').includes('RESULT=PASS') ? 'PASS' : 'FAIL';
            const policyHash = safeRead('policy_hash.txt');
            const bundleSha = safeRead('bundle.sha256.txt');
            const provenance = safeRead('provenance_onchain.json');
            const provenanceJson = provenance ? JSON.parse(provenance) : {};
            const merkle = provenanceJson.merkle_root || '';
            const txHash = provenanceJson.tx_hash || provenanceJson.worm_path || '';
            const signatures = safeRead('signatures.json');
            const sigJson = signatures ? JSON.parse(signatures) : {};
            const sigSummary = sigJson.threshold ? `${sigJson.threshold}-de-${sigJson.pubkeys?.length || 0} (${(sigJson.signatures || []).length} assinaturas)` : 'indispon√≠vel';
            const hashesManifest = safeRead('hashes_manifest.txt').split('\n').filter(Boolean).slice(0, 3).join(' | ');
            const cardinalityRaw = safeRead('cardinality.txt');
            const cardinality = cardinalityRaw.split('\n')[0] || cardinalityRaw;
            const envDump = safeRead('env_dump.txt');
            const histogramMatch = envDump.match(/HistogramSchemaVersion:\s*(.+)/);
            const histogramVersion = histogramMatch ? histogramMatch[1] : 'v0';
            const posterPath = 'dashboards/poster_a4.png';
            const posterExists = fs.existsSync(path.join(base, posterPath));
            const posterLink = posterExists ? `[Poster](${path.posix.join('out/orr_gatecheck/evidence', posterPath)})` : 'poster n√£o gerado';
            const indexLink = `[Evidence Index](out/orr_gatecheck/evidence/analysis/index.html)`;
            const simBase = path.join(process.cwd(), 'out/sim');
            const resilienceFast = fs.existsSync(path.join(simBase, 'report_fast.json')) ? fs.readFileSync(path.join(simBase, 'report_fast.json'), 'utf8').trim() : '';
            const resilienceJsonFast = resilienceFast ? JSON.parse(resilienceFast) : {};
            const resilienceTag = 'fast';

            const comment = [
              'Seguran√ßa Primeiro, Rollback Em Minutos.',
              'Se PASS, avance para Canary M1 em stage.',
              `‚úÖ STATUS: ${status}`,
              `‚úÖ POLICY_HASH: ${policyHash}`,
              `‚úÖ BUNDLE_SHA256: ${bundleSha}`,
              `‚úÖ MERKLE_ROOT / TX_HASH (L2 ou WORM): ${merkle} / ${txHash}`,
              `‚úÖ SIGNATURES (2-de-N): ${sigSummary} ‚Üí [signatures.json](out/orr_gatecheck/evidence/signatures.json)`,
              `‚úÖ CARDINALITY: ${cardinality || 'indispon√≠vel'} | Bounds: DEC‚â§2000, MBP‚â§3000, FE‚â§2000, DATA‚â§2000, INT‚â§1000, SEC‚â§1000`,
              `‚úÖ RESILIENCE_INDEX: ${resilienceTag}`,
              `‚úÖ OBS HistogramSchemaVersion: ${histogramVersion}`,
              `üìÑ Hashes (3 primeiros): ${hashesManifest}`,
              `üîó Evidence index: ${indexLink}`,
              `üñºÔ∏è Poster: ${posterLink}`
            ].join('\n');

            github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: comment
            });

name: _s4-orr

on:
  workflow_call:
    inputs:
      ref:
        required: false
        type: string
      run_microbench:
        required: false
        type: boolean
        default: false
      run_tla:
        required: false
        type: boolean
        default: false

concurrency:
  group: s4-orr-${{ inputs.ref || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write
  id-token: write

jobs:
  orr:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    env:
      PROM_URL: http://127.0.0.1:9090
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
      - name: Harden runner
        uses: step-security/harden-runner@v3
        with:
          egress-policy: block
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Install Python deps
        run: pip install -r requirements.lock
      - name: Install security tools
        run: |
          pip install semgrep==1.80.0
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz | tar xz && sudo mv gitleaks /usr/local/bin/
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.tar.gz | tar xz && sudo mv trivy /usr/local/bin/
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install npm deps
        run: npm ci --ignore-scripts
      - name: Resolve k6 digest
        id: k6
        run: |
          IMAGE=grafana/k6:0.52.0
          docker pull "$IMAGE" >/dev/null
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE")
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
      - name: Run ORR
        env:
          K6: docker run --rm -i -v ${{ github.workspace }}:/work -w /work ${{ steps.k6.outputs.digest }}
        run: |
          bash scripts/env_pin_check.sh
          bash scripts/orr_s4_run.sh
          bash scripts/s4_bundle.sh
          bash scripts/anchor_integrity.sh
      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: s4_evidence_bundle
          path: out/s4_evidence_bundle_*.zip
      - name: Upload dbt docs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-docs
          path: |
            target/catalog.json
            target/manifest.json
            target/index.html

  microbench:
    if: inputs.run_microbench
    runs-on: ubuntu-22.04
    needs: orr
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run microbench gate
        run: |
          scripts/microbench_dec.sh --scenario dec_tail
          python3 scripts/verify_microbench.py out/s4_orr/microbench.txt
      - name: Upload microbench
        uses: actions/upload-artifact@v4
        with:
          name: microbench
          path: out/s4_orr/microbench.txt

  tla:
    if: inputs.run_tla
    runs-on: ubuntu-22.04
    needs: orr
    steps:
      - uses: actions/checkout@v4
      - name: Install Apalache
        run: |
          curl -sSL https://github.com/informalsystems/apalache/releases/download/v0.41.2/apalache-0.41.2.tgz | tar xz
          sudo mv apalache-0.41.2/bin/apalache /usr/local/bin/
      - name: Run TLA checks
        run: |
          apalache check docs/spec/tla/dec_pre_ga.tla > out/s4_orr/tla_report.txt
      - name: Upload TLA report
        uses: actions/upload-artifact@v4
        with:
          name: tla-report
          path: out/s4_orr/tla_report.txt

 - name: Instalar Gitleaks (tarball)
  shell: bash
  run: |
    set -euo pipefail
    if command -v gitleaks >/dev/null 2>&1; then
      echo "[setup] Gitleaks já presente: $(gitleaks version | head -n1)"; exit 0; fi
    VER="8.18.1"
    URL="https://github.com/gitleaks/gitleaks/releases/download/v${VER}/gitleaks_${VER}_linux_x64.tar.gz"
    echo "[setup] Baixando Gitleaks ${VER}"
    curl -fsSL "$URL" -o gitleaks.tgz
    tar -xzf gitleaks.tgz gitleaks
    sudo install -m 0755 gitleaks /usr/local/bin/gitleaks
    rm -f gitleaks gitleaks.tgz
    gitleaks version || { echo "[setup] gitleaks não responde"; exit 1; }

- name: Mostrar versões das ferramentas
  shell: bash
  run: |
    set -euo pipefail
    echo "[setup] k6: $( (command -v k6 >/dev/null && k6 version) || echo 'usando Docker via K6_BIN')"
    echo "[setup] semgrep: $(semgrep --version)"
    echo "[setup] trivy: $(trivy --version | head -n1)"
    echo "[setup] gitleaks: $(gitleaks version | head -n1)"

- name: Localizar projetos DBT
  id: dbt_scan
  shell: bash
  run: |
    set -euo pipefail
    mkdir -p out
    mapfile -t DBT_PROJECTS < <( git ls-files -z '**/dbt_project.yml' | xargs -0 -r -n1 dirname | sort -u )
    printf '%s\n' "${DBT_PROJECTS[@]}" > out/dbt_projects.txt
    if ((${#DBT_PROJECTS[@]} > 0)); then
      echo "have_dbt=true" >> "$GITHUB_OUTPUT"
      echo "first=${DBT_PROJECTS[0]}" >> "$GITHUB_OUTPUT"
      echo "[dbt] Projetos encontrados:"; printf '  - %s\n' "${DBT_PROJECTS[@]}"
    else
      echo "have_dbt=false" >> "$GITHUB_OUTPUT"
      echo "[dbt] Nenhum dbt_project.yml encontrado; DBT será ignorado"
    fi

- name: Preparar ambiente DBT (venv isolada)
  if: ${{ steps.dbt_scan.outputs.have_dbt == 'true' }}
  shell: bash
  run: |
    set -euo pipefail
    python -m venv .venv-dbt
    . .venv-dbt/bin/activate
    python -m pip install --upgrade pip
    python -m pip install "dbt-core==1.6.4" "dbt-bigquery==1.6.4" "requests==2.31.0"
    deactivate

- name: Validar segredos GCP/BigQuery para DBT
  if: ${{ steps.dbt_scan.outputs.have_dbt == 'true' }}
  id: dbt_secrets
  env:
    GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
    DBT_BQ_PROJECT: ${{ secrets.DBT_BQ_PROJECT }}
    DBT_BQ_DATASET: ${{ secrets.DBT_BQ_DATASET }}
    DBT_BQ_LOCATION: ${{ secrets.DBT_BQ_LOCATION }}
  shell: bash
  run: |
    set -euo pipefail
    if [ -n "${GCP_SA_JSON:-}" ] && [ -n "${DBT_BQ_PROJECT:-}" ]; then
      echo "has_bq=true" >> "$GITHUB_OUTPUT"
      cred_file="$RUNNER_TEMP/gcp-sa.json"
      if printf '%s' "$GCP_SA_JSON" | grep -q '^{'; then
        printf '%s' "$GCP_SA_JSON" > "$cred_file"
      else
        (printf '%s' "$GCP_SA_JSON" | base64 -d > "$cred_file") || printf '%s' "$GCP_SA_JSON" > "$cred_file"
      fi
      echo "GOOGLE_APPLICATION_CREDENTIALS=$cred_file" >> "$GITHUB_ENV"
      echo "[dbt] Segredos OK e credencial preparada"
    else
      echo "has_bq=false" >> "$GITHUB_OUTPUT"
      echo "[dbt] Segredos GCP/BigQuery ausentes; DBT será ignorado"
    fi

- name: Executar DBT (deps, build, docs)
  if: ${{ steps.dbt_scan.outputs.have_dbt == 'true' && steps.dbt_secrets.outputs.has_bq == 'true' }}
  shell: bash
  env:
    DBT_BQ_PROJECT: ${{ secrets.DBT_BQ_PROJECT }}
    DBT_BQ_DATASET: ${{ secrets.DBT_BQ_DATASET }}
    DBT_BQ_LOCATION: ${{ secrets.DBT_BQ_LOCATION }}
  run: |
    set -euo pipefail
    . .venv-dbt/bin/activate
    while IFS= read -r project_dir; do
      [ -z "$project_dir" ] && continue
      echo "[dbt] Executando em: $project_dir"
      if [ -d "$project_dir/profiles" ]; then
        profiles="--profiles-dir $project_dir/profiles"
      else
        profiles="--profiles-dir $project_dir"
      fi
      dbt deps $profiles --project-dir "$project_dir"
      dbt build $profiles --project-dir "$project_dir"
      dbt docs generate $profiles --project-dir "$project_dir"
    done < out/dbt_projects.txt
    deactivate

- name: Upload docs do DBT (se existirem)
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: dbt-docs
    path: |
      **/target/catalog.json
      **/target/manifest.json
      **/target/index.html
    if-no-files-found: ignore

- name: Iniciar SUT (Compose/npm)
  if: ${{ inputs.run_sut }}
  shell: bash
  run: |
    set -euo pipefail
    echo "[sut] preparing start"
    mkdir -p out
    LOG_FILE="out/sut.log"
    : > "$LOG_FILE"
    echo "[sut] log file: $LOG_FILE"
    if [ "${EXTERNAL_SUT:-0}" = "1" ]; then
      echo "[sut] EXTERNAL_SUT=1 -> não iniciaremos processos locais"
      exit 0
    fi
    FILE=""
    for f in docker-compose.yml docker-compose.yaml compose.yaml; do
      if [ -f "$f" ]; then FILE="$f"; break; fi
    done
    if [ -n "$FILE" ] && command -v docker >/dev/null 2>&1; then
      echo "[sut] docker compose -f $FILE up -d --build"
      docker compose -f "$FILE" up -d --build
    fi
